<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ứng Dụng Xe Ghép</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8;
        }
        .tab-content { display: none; }
        .tab-content.active { display: flex; }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4">

    <!-- Firebase Imports -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, onSnapshot, query, orderBy, serverTimestamp, doc, getDoc, setDoc, setLogLevel, updateDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Cấu hình Firebase - được cung cấp tự động bởi môi trường Canvas.
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        // Bật chế độ ghi nhật ký gỡ lỗi cho Firebase
        setLogLevel('debug');

        // Khởi tạo ứng dụng Firebase
        let app;
        let db;
        let auth;
        let userId = null;
        let displayName = '';
        let isAuthReady = false;

        const loadingMessage = document.getElementById('loading-message');
        const mainApp = document.getElementById('main-app');
        const userIdDisplay = document.getElementById('user-id-display');
        const chatContent = document.getElementById('chat-content');
        const ridesContent = document.getElementById('rides-content');
        const rideList = document.getElementById('ride-list');
        const messageList = document.getElementById('message-list');
        const messageInput = document.getElementById('message-input');
        const sendButton = document.getElementById('send-button');
        const createRideForm = document.getElementById('create-ride-form');
        const originInput = document.getElementById('origin-input');
        const destinationInput = document.getElementById('destination-input');
        const createRideButton = document.getElementById('create-ride-button');
        const quickChatButtons = document.getElementById('quick-chat-buttons');

        // Hàm tải tên hiển thị từ Firestore
        const loadUserDisplayName = async () => {
            if (!isAuthReady || !userId) return;
            const userDocRef = doc(db, 'artifacts', appId, 'users', userId, 'user_data', 'profile');
            try {
                const docSnap = await getDoc(userDocRef);
                if (docSnap.exists()) {
                    displayName = docSnap.data().displayName || `Người dùng ${userId.substring(0, 4)}`;
                } else {
                    displayName = `Người dùng ${userId.substring(0, 4)}`;
                }
            } catch (e) {
                console.error('Lỗi khi tải tên hiển thị:', e);
            }
        };

        // Hàm tạo cuốc xe mới
        const createRide = async () => {
            if (!isAuthReady || !userId) {
                console.error("Authentication not ready. Cannot create ride.");
                return;
            }
            const origin = originInput.value.trim();
            const destination = destinationInput.value.trim();
            if (!origin || !destination) {
                alertModal('Vui lòng nhập cả điểm đón và điểm đến.', false);
                return;
            }

            const ridesCollectionRef = collection(db, 'artifacts', appId, 'public', 'data', 'rides');
            try {
                await addDoc(ridesCollectionRef, {
                    name: `Cuốc xe từ ${origin} đến ${destination}`,
                    origin: origin,
                    destination: destination,
                    status: 'Pending',
                    members: [userId],
                    createdAt: serverTimestamp(),
                    locationReminder: false
                });

                // Gửi tin nhắn vào cuộc trò chuyện
                const chatCollectionRef = collection(db, 'artifacts', appId, 'public', 'data', 'rideshare_chats');
                await addDoc(chatCollectionRef, {
                    authorId: userId,
                    authorName: displayName,
                    text: `Cuốc xe mới đã được tạo: Từ **${origin}** đến **${destination}**.`,
                    timestamp: serverTimestamp(),
                });

                alertModal('Cuốc xe đã được tạo thành công và thông báo đã được gửi vào trò chuyện!', true);
                originInput.value = '';
                destinationInput.value = '';
            } catch (e) {
                console.error('Lỗi khi tạo cuốc xe:', e);
                alertModal('Không thể tạo cuốc xe. Vui lòng thử lại.', false);
            }
        };

        // Hàm cập nhật cuốc xe
        const updateRideStatus = async (rideId, newStatus) => {
            if (!isAuthReady || !userId) {
                console.error("Authentication not ready. Cannot update ride.");
                return;
            }
            const rideDocRef = doc(db, 'artifacts', appId, 'public', 'data', 'rides', rideId);
            try {
                await updateDoc(rideDocRef, { status: newStatus });
            } catch (e) {
                console.error('Lỗi khi cập nhật trạng thái cuốc xe:', e);
                alertModal('Không thể cập nhật trạng thái. Vui lòng thử lại.', false);
            }
        };

        // Hàm gửi tin nhắn
        const sendMessage = async () => {
            if (!isAuthReady || !userId) {
                console.error("Authentication not ready. Cannot send message.");
                return;
            }
            const messageText = messageInput.value.trim();
            if (messageText === '') return;

            const chatCollectionRef = collection(db, 'artifacts', appId, 'public', 'data', 'rideshare_chats');

            try {
                await addDoc(chatCollectionRef, {
                    authorId: userId,
                    authorName: displayName,
                    text: messageText,
                    timestamp: serverTimestamp(),
                });
                messageInput.value = '';
            } catch (e) {
                console.error('Lỗi khi gửi tin nhắn:', e);
                alertModal('Không thể gửi tin nhắn. Vui lòng thử lại.', false);
            }
        };

        // Hàm hiển thị tin nhắn trên giao diện
        const displayMessage = (message) => {
            const messageElement = document.createElement('div');
            const isMe = message.authorId === userId;
            const messageClass = isMe ? 'bg-blue-500 text-white self-end' : 'bg-gray-200 text-gray-800 self-start';
            
            const formattedTime = message.timestamp ? new Date(message.timestamp.seconds * 1000).toLocaleTimeString() : '...';

            messageElement.className = `max-w-xs md:max-w-md p-3 rounded-lg shadow-sm mb-2 ${messageClass}`;
            messageElement.innerHTML = `
                <div class="font-bold">${message.authorName}</div>
                <div>${message.text}</div>
                <div class="text-xs text-right mt-1 opacity-75">${formattedTime}</div>
            `;
            messageList.appendChild(messageElement);
            messageList.scrollTop = messageList.scrollHeight; // Tự động cuộn xuống dưới cùng
        };

        // Hàm hiển thị cuốc xe trên giao diện
        const displayRide = (rideId, rideData) => {
            const rideElement = document.createElement('div');
            rideElement.className = `bg-white p-4 rounded-lg shadow-md mb-3`;
            rideElement.innerHTML = `
                <h3 class="font-semibold text-lg">${rideData.name}</h3>
                <p class="text-sm text-gray-600"><strong>Điểm đón:</strong> ${rideData.origin}</p>
                <p class="text-sm text-gray-600"><strong>Điểm trả:</strong> ${rideData.destination}</p>
                <p class="text-sm text-gray-600"><strong>Trạng thái:</strong> <span class="font-bold text-green-600">${rideData.status}</span></p>
                <p class="text-xs text-gray-500 mt-1">ID cuốc xe: ${rideId}</p>
                <button onclick="updateRideStatus('${rideId}', 'Completed')" class="mt-2 text-sm bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600">Hoàn thành</button>
            `;
            rideList.appendChild(rideElement);
        };


        const alertModal = (message, isSuccess) => {
            const modal = document.createElement('div');
            modal.className = `fixed inset-0 flex items-center justify-center p-4 bg-gray-900 bg-opacity-50 transition-opacity duration-300 z-50`;
            const colorClass = isSuccess ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800';
            modal.innerHTML = `
                <div class="bg-white rounded-lg shadow-xl p-6 transform transition-all sm:my-8 sm:w-full sm:max-w-md ${colorClass}">
                    <div class="text-lg leading-6 font-medium text-gray-900">${message}</div>
                    <div class="mt-4 flex justify-end">
                        <button onclick="this.closest('.fixed').remove()" class="inline-flex justify-center rounded-md border border-transparent px-4 py-2 text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 bg-blue-500 text-white hover:bg-blue-600">Đóng</button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        };

        // Hàm chuyển đổi tab
        const switchTab = (tabId) => {
            document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
            document.getElementById(`${tabId}-content`).classList.add('active');
            document.querySelectorAll('.tab-button').forEach(button => button.classList.remove('bg-blue-600', 'text-white'));
            document.getElementById(`${tabId}-tab`).classList.add('bg-blue-600', 'text-white');
        };

        window.onload = async () => {
            try {
                if (Object.keys(firebaseConfig).length > 0) {
                    app = initializeApp(firebaseConfig);
                    db = getFirestore(app);
                    auth = getAuth(app);
                    
                    // Xử lý xác thực người dùng đầu tiên một cách đồng bộ
                    let user;
                    if (initialAuthToken) {
                        try {
                            const userCredential = await signInWithCustomToken(auth, initialAuthToken);
                            user = userCredential.user;
                        } catch (error) {
                            console.error('Lỗi khi đăng nhập bằng mã thông báo tùy chỉnh:', error);
                            const userCredential = await signInAnonymously(auth);
                            user = userCredential.user;
                        }
                    } else {
                        const userCredential = await signInAnonymously(auth);
                        user = userCredential.user;
                    }

                    if (user) {
                        userId = user.uid;
                        isAuthReady = true;
                        userIdDisplay.textContent = `ID của bạn: ${userId}`;
                        console.log('Xác thực thành công. Bắt đầu lắng nghe dữ liệu...');

                        // Tải tên hiển thị của người dùng
                        await loadUserDisplayName();

                        // Bắt đầu lắng nghe cuốc xe
                        const ridesCollectionRef = collection(db, 'artifacts', appId, 'public', 'data', 'rides');
                        const qRides = query(ridesCollectionRef, orderBy('createdAt', 'desc'));
                        onSnapshot(qRides, (snapshot) => {
                            rideList.innerHTML = '';
                            snapshot.forEach(doc => {
                                displayRide(doc.id, doc.data());
                            });
                        }, (error) => {
                            console.error('Lỗi khi lắng nghe cuốc xe:', error);
                        });

                        // Bắt đầu lắng nghe tin nhắn
                        const chatCollectionRef = collection(db, 'artifacts', appId, 'public', 'data', 'rideshare_chats');
                        const qChat = query(chatCollectionRef, orderBy('timestamp', 'asc'));
                        onSnapshot(qChat, (snapshot) => {
                            snapshot.docChanges().forEach((change) => {
                                const message = change.doc.data();
                                if (change.type === 'added') {
                                    displayMessage(message);
                                }
                            });
                        }, (error) => {
                            console.error('Lỗi khi lắng nghe tin nhắn:', error);
                        });

                        loadingMessage.textContent = '';
                        mainApp.classList.remove('hidden');
                    }

                } else {
                    loadingMessage.textContent = 'Lỗi: Không tìm thấy cấu hình Firebase.';
                }

                // Các lắng nghe sự kiện này không phụ thuộc vào Firebase và có thể được thêm vào ngay lập tức
                document.getElementById('rides-tab').addEventListener('click', () => switchTab('rides'));
                document.getElementById('chat-tab').addEventListener('click', () => switchTab('chat'));

                sendButton.addEventListener('click', sendMessage);
                messageInput.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter') {
                        sendMessage();
                    }
                });

                createRideForm.addEventListener('submit', async (e) => {
                    e.preventDefault();
                    await createRide();
                });

                quickChatButtons.addEventListener('click', (e) => {
                    if (e.target.tagName === 'BUTTON') {
                        messageInput.value = e.target.textContent;
                        sendMessage();
                    }
                });

            } catch (error) {
                console.error('Lỗi khi khởi tạo Firebase:', error);
                loadingMessage.textContent = 'Lỗi khi khởi tạo ứng dụng.';
            }
        };

        window.updateRideStatus = updateRideStatus;
    </script>

    <!-- Main App UI -->
    <div id="loading-message" class="text-gray-600">Đang tải ứng dụng, vui lòng đợi...</div>
    <div id="main-app" class="hidden flex flex-col w-full max-w-lg bg-white rounded-xl shadow-2xl p-6 h-[90vh]">
        
        <div class="flex-shrink-0 mb-4">
            <div class="flex space-x-2">
                <button id="rides-tab" class="tab-button flex-1 p-3 rounded-t-lg bg-blue-600 text-white font-semibold shadow-md">Cuốc xe</button>
                <button id="chat-tab" class="tab-button flex-1 p-3 rounded-t-lg bg-gray-200 text-gray-700 font-semibold shadow-md">Trò chuyện</button>
            </div>
            <p id="user-id-display" class="text-sm text-center text-gray-500 mt-2"></p>
        </div>

        <!-- Rides Content -->
        <div id="rides-content" class="tab-content active flex-col flex-1 overflow-y-auto">
            <form id="create-ride-form" class="bg-gray-100 p-4 rounded-lg mb-4">
                <h2 class="text-xl font-bold mb-3">Tạo Cuốc xe Mới</h2>
                <div class="space-y-2">
                    <input id="origin-input" type="text" placeholder="Địa chỉ đón..."
                           class="w-full p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <input id="destination-input" type="text" placeholder="Địa chỉ trả..."
                           class="w-full p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <button id="create-ride-button" type="submit"
                            class="w-full bg-blue-500 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-blue-600 transition-colors">
                        Tạo Cuốc xe
                    </button>
                </div>
            </form>
            <div id="ride-list" class="flex-1 overflow-y-auto">
                <!-- Danh sách cuốc xe sẽ được hiển thị tại đây -->
            </div>
        </div>

        <!-- Chat Content -->
        <div id="chat-content" class="tab-content flex-col flex-1">
            <div id="message-list" class="flex-1 overflow-y-auto space-y-4 p-4 mb-4 bg-gray-50 rounded-lg border border-gray-200">
                <!-- Tin nhắn sẽ được hiển thị tại đây -->
            </div>

            <div id="quick-chat-buttons" class="flex flex-wrap gap-2 mb-4">
                <button class="bg-gray-200 hover:bg-gray-300 text-sm px-3 py-1 rounded-full">Ok</button>
                <button class="bg-gray-200 hover:bg-gray-300 text-sm px-3 py-1 rounded-full">Đang đến</button>
                <button class="bg-gray-200 hover:bg-gray-300 text-sm px-3 py-1 rounded-full">Đã nhận cuốc</button>
            </div>

            <div class="flex space-x-2">
                <input id="message-input" type="text" placeholder="Gửi tin nhắn..."
                       class="flex-1 p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500">
                <button id="send-button"
                        class="bg-blue-500 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-blue-600 transition-colors">
                    Gửi
                </button>
            </div>
        </div>
    </div>
</body>
</html>
